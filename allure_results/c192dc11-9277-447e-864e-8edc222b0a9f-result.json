{"name": "test_filter_characters_neutral", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=115.0.5790.171); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0119A813+48355]\n\t(No symbol) [0x0112C4B1]\n\t(No symbol) [0x01035358]\n\t(No symbol) [0x0103E5A3]\n\t(No symbol) [0x01038A78]\n\t(No symbol) [0x01037C03]\n\t(No symbol) [0x010399E1]\n\t(No symbol) [0x01039A80]\n\t(No symbol) [0x0105D2FD]\n\t(No symbol) [0x0107A73C]\n\t(No symbol) [0x01059A36]\n\t(No symbol) [0x0107AA94]\n\t(No symbol) [0x0108C922]\n\t(No symbol) [0x0107A536]\n\t(No symbol) [0x010582DC]\n\t(No symbol) [0x010593DD]\n\tGetHandleVerifier [0x013FAABD+2539405]\n\tGetHandleVerifier [0x0143A78F+2800735]\n\tGetHandleVerifier [0x0143456C+2775612]\n\tGetHandleVerifier [0x012251E0+616112]\n\t(No symbol) [0x01135F8C]\n\t(No symbol) [0x01132328]\n\t(No symbol) [0x0113240B]\n\t(No symbol) [0x01124FF7]\n\tBaseThreadInitThunk [0x766000C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x773D7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x773D7AEE+238]", "trace": "self = <test_base_page.TestFilterCharactersByAlignment object at 0x00000286716F8970>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf7766447a560df933d80917dcd7ede1\")>, alignment_filter = ['Light Side', 'Dark Side', 'Neutral']\n\n    def test_filter_characters_neutral(self, driver, alignment_filter):\n        search_page = SearchPage(driver)\n        search_page.open_page()\n        search_page.click_filters_button()\n        search_page.click_on_a_specific_filter(loc.alignments_button_filter_loc)\n        search_page.click_on_a_specific_filter(loc.filter_loc_Neutral)\n>       assert search_page.check_filtered_characters_is_valid(alignment_filter[2]) == 1\n\ntests\\test_base_page.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\searching_page.py:21: in check_filtered_characters_is_valid\n    filtered_chars.append(i.text)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000286717247C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773D7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773D7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=115.0.5790.171); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0119A813+48355]\nE       \t(No symbol) [0x0112C4B1]\nE       \t(No symbol) [0x01035358]\nE       \t(No symbol) [0x0103E5A3]\nE       \t(No symbol) [0x01038A78]\nE       \t(No symbol) [0x01037C03]\nE       \t(No symbol) [0x010399E1]\nE       \t(No symbol) [0x01039A80]\nE       \t(No symbol) [0x0105D2FD]\nE       \t(No symbol) [0x0107A73C]\nE       \t(No symbol) [0x01059A36]\nE       \t(No symbol) [0x0107AA94]\nE       \t(No symbol) [0x0108C922]\nE       \t(No symbol) [0x0107A536]\nE       \t(No symbol) [0x010582DC]\nE       \t(No symbol) [0x010593DD]\nE       \tGetHandleVerifier [0x013FAABD+2539405]\nE       \tGetHandleVerifier [0x0143A78F+2800735]\nE       \tGetHandleVerifier [0x0143456C+2775612]\nE       \tGetHandleVerifier [0x012251E0+616112]\nE       \t(No symbol) [0x01135F8C]\nE       \t(No symbol) [0x01132328]\nE       \t(No symbol) [0x0113240B]\nE       \t(No symbol) [0x01124FF7]\nE       \tBaseThreadInitThunk [0x766000C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x773D7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x773D7AEE+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: StaleElementReferenceException"}, "start": 1691506800128, "stop": 1691506901181, "uuid": "34f8bc52-3412-473e-9fb4-0db1fe353302", "historyId": "f0d2e2ca81916c6b9a2064cba2fe76a9", "testCaseId": "f0d2e2ca81916c6b9a2064cba2fe76a9", "fullName": "tests.test_base_page.TestFilterCharactersByAlignment#test_filter_characters_neutral", "labels": [{"name": "story", "value": "Filtering by alignment"}, {"name": "feature", "value": "Filtering Characters"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_base_page"}, {"name": "subSuite", "value": "TestFilterCharactersByAlignment"}, {"name": "host", "value": "LP-L1268"}, {"name": "thread", "value": "7772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_base_page"}]}