{
  "uid" : "c91a5c2d5602e9ec",
  "name" : "test_filter_characters_advantage",
  "fullName" : "tests.test_search_page.TestFilterCharactersByAbilityClasses#test_filter_characters_advantage",
  "historyId" : "530bf0da1829226124754d1483d0473a",
  "time" : {
    "start" : 1723908734376,
    "stop" : 1723908833430,
    "duration" : 99054
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: cannot determine loading status\nfrom no such window\n  (Session info: headless chrome=112.0.5615.165)",
  "statusTrace" : "self = <test_search_page.TestFilterCharactersByAbilityClasses object at 0x7f7d24883f80>\n\n    def test_filter_characters_advantage(self):\n        self.search_page.open_page()\n        self.search_page.click_filters_button()\n        self.search_page.click_on_a_specific_filter(loc.ability_button_filter_loc)\n        self.search_page.click_on_a_specific_filter(loc.filter_loc_Advantage)\n    \n        assert self.search_page.check_that_selected_filter_is_correct(loc.filter_loc_Advantage)\n>       assert self.search_page.check_that_filtered_characters_is_valid(loc.filter_loc_Advantage)\n\ntests/test_search_page.py:355: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/searching_page.py:53: in check_that_filtered_characters_is_valid\n    self.take_screenshot(\"Character page\")\nbase/base_page.py:67: in take_screenshot\n    body=self.driver.get_screenshot_as_png(),\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7d24b0ce60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\... determine loading status\\\\nfrom no such window\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: cannot determine loading status\nE       from no such window\nE         (Session info: headless chrome=112.0.5615.165)\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1723908734375,
      "stop" : 1723908734376,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1723908733928,
      "stop" : 1723908734375,
      "duration" : 447
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: cannot determine loading status\nfrom no such window\n  (Session info: headless chrome=112.0.5615.165)",
    "statusTrace" : "self = <test_search_page.TestFilterCharactersByAbilityClasses object at 0x7f7d24883f80>\n\n    def test_filter_characters_advantage(self):\n        self.search_page.open_page()\n        self.search_page.click_filters_button()\n        self.search_page.click_on_a_specific_filter(loc.ability_button_filter_loc)\n        self.search_page.click_on_a_specific_filter(loc.filter_loc_Advantage)\n    \n        assert self.search_page.check_that_selected_filter_is_correct(loc.filter_loc_Advantage)\n>       assert self.search_page.check_that_filtered_characters_is_valid(loc.filter_loc_Advantage)\n\ntests/test_search_page.py:355: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/searching_page.py:53: in check_that_filtered_characters_is_valid\n    self.take_screenshot(\"Character page\")\nbase/base_page.py:67: in take_screenshot\n    body=self.driver.get_screenshot_as_png(),\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7d24b0ce60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\... determine loading status\\\\nfrom no such window\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: cannot determine loading status\nE       from no such window\nE         (Session info: headless chrome=112.0.5615.165)\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException",
    "steps" : [ {
      "name" : "Open Page https://swgoh.gg/characters/",
      "time" : {
        "start" : 1723908734376,
        "stop" : 1723908748032,
        "duration" : 13656
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Click on filters button",
      "time" : {
        "start" : 1723908748032,
        "stop" : 1723908748094,
        "duration" : 62
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Select filter unit-active-filter-tab",
      "time" : {
        "start" : 1723908748094,
        "stop" : 1723908749183,
        "duration" : 1089
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Select filter 'Advantage'",
      "time" : {
        "start" : 1723908749183,
        "stop" : 1723908749743,
        "duration" : 560
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Checking that filtered characters is valid for filter 'Advantage'",
      "time" : {
        "start" : 1723908749765,
        "stop" : 1723908833417,
        "duration" : 83652
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: cannot determine loading status\nfrom no such window\n  (Session info: headless chrome=112.0.5615.165)\n\n",
      "statusTrace" : "  File \"/swgoh_test_project/pages/searching_page.py\", line 53, in check_that_filtered_characters_is_valid\n    self.take_screenshot(\"Character page\")\n  File \"/swgoh_test_project/base/base_page.py\", line 67, in take_screenshot\n    body=self.driver.get_screenshot_as_png(),\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 832, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 843, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1afa27eed809f901",
        "name" : "Character page",
        "source" : "1afa27eed809f901.png",
        "type" : "image/png",
        "size" : 251740
      }, {
        "uid" : "28a2ea29106581d0",
        "name" : "Character page",
        "source" : "28a2ea29106581d0.png",
        "type" : "image/png",
        "size" : 281974
      }, {
        "uid" : "c455c3cbcec1a9b",
        "name" : "Character page",
        "source" : "c455c3cbcec1a9b.png",
        "type" : "image/png",
        "size" : 257055
      }, {
        "uid" : "80e83acf721d291a",
        "name" : "Character page",
        "source" : "80e83acf721d291a.png",
        "type" : "image/png",
        "size" : 253814
      }, {
        "uid" : "cb95d56d75ad3be9",
        "name" : "Character page",
        "source" : "cb95d56d75ad3be9.png",
        "type" : "image/png",
        "size" : 278819
      }, {
        "uid" : "7e5efe146a71aa0b",
        "name" : "Character page",
        "source" : "7e5efe146a71aa0b.png",
        "type" : "image/png",
        "size" : 276726
      }, {
        "uid" : "c2a33ec7ae7846d4",
        "name" : "Character page",
        "source" : "c2a33ec7ae7846d4.png",
        "type" : "image/png",
        "size" : 269954
      }, {
        "uid" : "1ab89fec874f947a",
        "name" : "Character page",
        "source" : "1ab89fec874f947a.png",
        "type" : "image/png",
        "size" : 272871
      }, {
        "uid" : "a5904caba075eca7",
        "name" : "Character page",
        "source" : "a5904caba075eca7.png",
        "type" : "image/png",
        "size" : 275182
      }, {
        "uid" : "7c6c393f555f79fd",
        "name" : "Character page",
        "source" : "7c6c393f555f79fd.png",
        "type" : "image/png",
        "size" : 263990
      }, {
        "uid" : "19655330c55827a6",
        "name" : "Character page",
        "source" : "19655330c55827a6.png",
        "type" : "image/png",
        "size" : 270997
      }, {
        "uid" : "33f376610ac5321f",
        "name" : "Character page",
        "source" : "33f376610ac5321f.png",
        "type" : "image/png",
        "size" : 274739
      }, {
        "uid" : "873d4974b7e56dff",
        "name" : "Character page",
        "source" : "873d4974b7e56dff.png",
        "type" : "image/png",
        "size" : 247808
      }, {
        "uid" : "24a697313279d4d1",
        "name" : "Character page",
        "source" : "24a697313279d4d1.png",
        "type" : "image/png",
        "size" : 246467
      }, {
        "uid" : "3c470171d259e075",
        "name" : "Character page",
        "source" : "3c470171d259e075.png",
        "type" : "image/png",
        "size" : 294049
      }, {
        "uid" : "8ff9943ffb5cf302",
        "name" : "Character page",
        "source" : "8ff9943ffb5cf302.png",
        "type" : "image/png",
        "size" : 269685
      }, {
        "uid" : "b827099d66b3983f",
        "name" : "Character page",
        "source" : "b827099d66b3983f.png",
        "type" : "image/png",
        "size" : 264368
      }, {
        "uid" : "232cd0a75d0a7869",
        "name" : "Character page",
        "source" : "232cd0a75d0a7869.png",
        "type" : "image/png",
        "size" : 284908
      }, {
        "uid" : "7f41d0d46317a7b8",
        "name" : "Character page",
        "source" : "7f41d0d46317a7b8.png",
        "type" : "image/png",
        "size" : 275656
      }, {
        "uid" : "2122a7bd4415e9a1",
        "name" : "Character page",
        "source" : "2122a7bd4415e9a1.png",
        "type" : "image/png",
        "size" : 277683
      }, {
        "uid" : "552a1a351ccccfc7",
        "name" : "Character page",
        "source" : "552a1a351ccccfc7.png",
        "type" : "image/png",
        "size" : 236534
      }, {
        "uid" : "a823faaa2a76ad50",
        "name" : "Character page",
        "source" : "a823faaa2a76ad50.png",
        "type" : "image/png",
        "size" : 288140
      }, {
        "uid" : "7ab36f4bf3d8bee5",
        "name" : "Character page",
        "source" : "7ab36f4bf3d8bee5.png",
        "type" : "image/png",
        "size" : 292414
      }, {
        "uid" : "d05fd559fd34d6c8",
        "name" : "Character page",
        "source" : "d05fd559fd34d6c8.png",
        "type" : "image/png",
        "size" : 233792
      }, {
        "uid" : "c03db372e84519a7",
        "name" : "Character page",
        "source" : "c03db372e84519a7.png",
        "type" : "image/png",
        "size" : 261213
      }, {
        "uid" : "c4d28d16db3882f6",
        "name" : "Character page",
        "source" : "c4d28d16db3882f6.png",
        "type" : "image/png",
        "size" : 263948
      }, {
        "uid" : "f50a906339af7562",
        "name" : "Character page",
        "source" : "f50a906339af7562.png",
        "type" : "image/png",
        "size" : 271447
      }, {
        "uid" : "536652ffee7cec24",
        "name" : "Character page",
        "source" : "536652ffee7cec24.png",
        "type" : "image/png",
        "size" : 7181
      }, {
        "uid" : "4a0c133608345bdc",
        "name" : "Character page",
        "source" : "4a0c133608345bdc.png",
        "type" : "image/png",
        "size" : 239829
      }, {
        "uid" : "17698b6b89092f6b",
        "name" : "Character page",
        "source" : "17698b6b89092f6b.png",
        "type" : "image/png",
        "size" : 243086
      }, {
        "uid" : "62413be68c422c50",
        "name" : "Character page",
        "source" : "62413be68c422c50.png",
        "type" : "image/png",
        "size" : 256737
      }, {
        "uid" : "629646c9b981e3e8",
        "name" : "Character page",
        "source" : "629646c9b981e3e8.png",
        "type" : "image/png",
        "size" : 269893
      }, {
        "uid" : "e02adef635810bdd",
        "name" : "Character page",
        "source" : "e02adef635810bdd.png",
        "type" : "image/png",
        "size" : 256307
      }, {
        "uid" : "1d09ec3f4bc51e09",
        "name" : "Character page",
        "source" : "1d09ec3f4bc51e09.png",
        "type" : "image/png",
        "size" : 244753
      }, {
        "uid" : "993234ce0b636b2c",
        "name" : "Character page",
        "source" : "993234ce0b636b2c.png",
        "type" : "image/png",
        "size" : 240045
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 35,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "b73614a54c147ed7",
      "name" : "log",
      "source" : "b73614a54c147ed7.txt",
      "type" : "text/plain",
      "size" : 12359458
    }, {
      "uid" : "34bdf03506f926d0",
      "name" : "stdout",
      "source" : "34bdf03506f926d0.txt",
      "type" : "text/plain",
      "size" : 339
    }, {
      "uid" : "55008a1a1350daeb",
      "name" : "stderr",
      "source" : "55008a1a1350daeb.txt",
      "type" : "text/plain",
      "size" : 12365274
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 38,
    "shouldDisplayMessage" : true,
    "stepsCount" : 5,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1723908833491,
      "stop" : 1723908833588,
      "duration" : 97
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Filtering Characters"
  }, {
    "name" : "story",
    "value" : "Filtering by Ability Classes"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_search_page"
  }, {
    "name" : "subSuite",
    "value" : "TestFilterCharactersByAbilityClasses"
  }, {
    "name" : "host",
    "value" : "0882512a7923"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_search_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c91a5c2d5602e9ec.json",
  "parameterValues" : [ ]
}